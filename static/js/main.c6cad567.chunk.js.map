{"version":3,"sources":["logo.svg","services/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiService","axios","create","baseURL","timeout","getJwt","localStorage","getItem","interceptors","request","use","headers","authorization","response","setItem","error","status","alert","StudentService","getAllStudent","get","App","className","src","logo","alt","onClick","then","res","console","log","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,mMCErCC,E,OAAaC,EAAMC,OAAO,CAC5BC,QAAS,yBACTC,QAAS,MAGPC,EAAS,kBAAMC,aAAaC,QAAQ,cAE1CP,EAAWQ,aAAaC,QAAQC,IAAI,SAAAD,GAKhC,OAJgB,MAAZJ,MACAI,EAAQE,QAAQC,cAAhB,iBAA0CP,MAGvCI,IAGXT,EAAWQ,aAAaK,SAASH,IAAI,SAAAG,GAIjC,OAHIA,EAASF,QAAQC,eACjBN,aAAaQ,QAAQ,YAAaD,EAASF,QAAQC,eAEhDC,GACR,SAAAE,GAEC,OADmBA,EAAMF,SAASG,QAE9B,KAAK,IACDC,MAAM,UACV,QACI,MAAMF,KAIX,IAAMG,EAAiB,CAC1BC,cAD0B,WAEtB,OAAOnB,EAAWoB,IAAI,eCFfC,MA3Bf,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACS,4CADT,wBAGA,4BAAQC,QAAS,WACbR,EAAeC,gBAAgBQ,KAAK,SAAAC,GAChCC,QAAQC,IAAIF,OAFpB,oBAMA,uBACIN,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,kBCPIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.c6cad567.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\n\nconst ApiService = axios.create({\n    baseURL: 'http://127.0.0.1:3000/',\n    timeout: 1000,\n});\n\nconst getJwt = () => localStorage.getItem(\"jwt-token\");\n\nApiService.interceptors.request.use(request => {\n    if (getJwt() != null) {\n        request.headers.authorization = `Bearer ${getJwt()}`;\n    }\n\n    return request\n});\n\nApiService.interceptors.response.use(response => {\n    if (response.headers.authorization) {\n        localStorage.setItem('jwt-token', response.headers.authorization);\n    }\n    return response;\n}, error => {\n    const statusCode = error.response.status\n    switch (statusCode) {\n        case 401:\n            alert(\"/login\");\n        default:\n            throw error;\n    }\n});\n\nexport const StudentService = {\n    getAllStudent() {\n        return ApiService.get(\"/students\");\n    }\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {StudentService} from \"./services/api\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <button onClick={() => {\n                    StudentService.getAllStudent().then(res => {\n                        console.log(res)\n                    })\n                }}>Get All Students\n                </button>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}